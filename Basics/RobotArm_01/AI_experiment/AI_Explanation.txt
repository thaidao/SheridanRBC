To control a 5-axis robot arm using an Arduino and five servo motors, you'll need to use the `Servo` library. The coordinates where the arm should reach can be input, and you'll need to implement inverse kinematics to convert these coordinates into angles for the servo motors. Here is a basic example of how you might set up the Arduino code to control the servos based on target coordinates and motor control pins.

```cpp
#include <Servo.h>

// Define the Servo objects
Servo sv0;
Servo sv1;
Servo sv2;
Servo sv3;
Servo sv4;

// Define control pins for the servos
const int CTR0 = 2;
const int CTR1 = 3;
const int CTR2 = 4;
const int CTR3 = 5;
const int CTR4 = 6;

// Function prototypes
void moveToPosition(float x, float y, float z, float roll, float pitch);

void setup() {
  // Attach the servos to the control pins
  sv0.attach(CTR0);
  sv1.attach(CTR1);
  sv2.attach(CTR2);
  sv3.attach(CTR3);
  sv4.attach(CTR4);
  
  // Initialize servos to initial angles (0 degrees)
  sv0.write(0);
  sv1.write(0);
  sv2.write(0);
  sv3.write(0);
  sv4.write(0);
  
  // Start serial communication for debugging
  Serial.begin(9600);
}

void loop() {
  // Example coordinates and angles
  float targetX = 10.0;
  float targetY = 10.0;
  float targetZ = 10.0;
  float targetRoll = 0.0;
  float targetPitch = 0.0;

  // Move to the specified position
  moveToPosition(targetX, targetY, targetZ, targetRoll, targetPitch);
  
  // Wait for a while before the next move (for testing purposes)
  delay(5000);
}

void moveToPosition(float x, float y, float z, float roll, float pitch) {
  // Placeholder for inverse kinematics calculations
  // These calculations should convert the (x, y, z, roll, pitch) to servo angles
  // Here we assume some dummy angles for demonstration purposes
  int angle0 = 90;  // Dummy angle for sv0
  int angle1 = 90;  // Dummy angle for sv1
  int angle2 = 90;  // Dummy angle for sv2
  int angle3 = 90;  // Dummy angle for sv3
  int angle4 = 90;  // Dummy angle for sv4
  
  // Write the angles to the servos
  sv0.write(angle0);
  sv1.write(angle1);
  sv2.write(angle2);
  sv3.write(angle3);
  sv4.write(angle4);
  
  // Print the angles for debugging
  Serial.print("Moving to position: (");
  Serial.print(x);
  Serial.print(", ");
  Serial.print(y);
  Serial.print(", ");
  Serial.print(z);
  Serial.print(") with roll ");
  Serial.print(roll);
  Serial.print(" and pitch ");
  Serial.println(pitch);
  Serial.print("Servo angles: ");
  Serial.print(angle0);
  Serial.print(", ");
  Serial.print(angle1);
  Serial.print(", ");
  Serial.print(angle2);
  Serial.print(", ");
  Serial.print(angle3);
  Serial.print(", ");
  Serial.println(angle4);
}
```

### Explanation:
1. **Library and Servo Objects**: We include the `Servo` library and create `Servo` objects for each of the five servo motors.
2. **Control Pins**: Define the control pins for each servo motor.
3. **Setup Function**: Attach each servo to its respective control pin and initialize them to 0 degrees. Start serial communication for debugging purposes.
4. **Loop Function**: Define target coordinates and call the `moveToPosition` function to move the robot arm to the specified position. There's a delay to allow time for observing the movement.
5. **moveToPosition Function**: This function is a placeholder where inverse kinematics calculations should be done to convert the target position (x, y, z) and orientation (roll, pitch) into servo angles. Here, dummy angles are used for demonstration purposes.

### Note:
- **Inverse Kinematics**: The actual implementation should include inverse kinematics to calculate the necessary angles for each servo based on the target coordinates. This part is complex and depends on the specific geometry of your robot arm.
- **Safety**: Make sure to test the movements carefully to avoid damaging the servos or the arm.